---
title: "Class 5: Data Visualization with ggplot"
author: "Kevin Tan (PID: A16774162)"
format: pdf
toc: true
---

Today we will have our first play with the **ggplot2** package - one of the most popular graphics packages on the planet. 

There are many plotting systems in R. These include so-called *"base"* plotting/graphics. 

```{r}
plot(cars)
```

Based plot is generally short code and somewhat dull plots - but it is always there for you and is really fast for big datasets.


If I want to use **ggplot2** it takes some more work

```{r}
# ggplot(cars)
```

I need to install the package first to my computer. To do this I can use the function `install.packages("ggplot2")`

Every time I want to use a package I need to load it up with a `library()`

```{r}
library(ggplot2)
```


Now finally I can use ggplot 
```{r}
ggplot(cars)
```



Every ggplot has at least 3 things: 

- **data** (the data.frame with the data you want to plot)
- **aes** (the aesthetics mapping of the data to the plot)
- **geom** (how do you want the plot to look, points, lines, etc.)

```{r}
head(cars)
```

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth()
```


I want a linear model and no standard error bounnds shown on my plot. I also want nicer axis labs, a title, etc.

```{r}
bp <- ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point()
```


```{r}
bp + geom_smooth(method = 'lm', se=FALSE) + 
  labs(title="Stopping Distance of Old Cars",
       x="Speed (mph)", 
       y="Distance (ft)",
       caption="From the cars dataset") + 
  theme_bw()
```


## A more complicated scatter plot

Here we make a plot of gene expression data

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
```

```{r}
head(genes)
```
```{r}
nrow(genes)
```
```{r}
colnames(genes)
```
```{r}
ncol(genes)
```
```{r}
table(genes$State)
```
```{r}
round(sum(genes$State=="up") / nrow(genes) * 100, 2)
```

```{r}
head(genes, 2)
```

```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p
```

```{r}
p + scale_colour_manual( values=c("blue","gray","red") )
```

```{r}
p + labs(Title="Drug Data", x="Control (no drug)", y="Treatment (with drug)")
```

## Exploring the gapminder dataset 

Here we will load up the gapminder dataset 

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

> Q. How many entries rows are in this dataset?

```{r}
nrow(gapminder)
```

> Q.  How many columns?

```{r}
ncol(gapminder)
```

```{r}
head(gapminder)
```

```{r}
table(gapminder$year)
```

>Q. How many continents? 

```{r}
table(gapminder$continent)
```
I could use the `unique()` function...

```{r}
length(unique(gapminder$continent))
```

>Q. HOw man countries are there in this dataset?

```{r}
length(unique(gapminder$country))
```

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=0.2)
```


```{r}
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
head(gapminder_2007)
```


```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.2) +
  facet_wrap(~continent)
```


