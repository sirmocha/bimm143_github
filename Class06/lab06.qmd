---
title: "Class 6: R Functions"
author: "Kevin Tan (PID: A16774162)"
format: pdf
---

Functions are how we get work done in R. We call functions to do everything fromm reading data to doing analysis and outputing plots and results.

All functions in R have at least 3 things: 

- a **name** (you get to pick this)
- input **arguments** (there can be one or more - again your call)
- **body** (where the work gets dones - this code between the curly brackets)

## First Silly Function 

Let's write a function to add numbers. We can call it `add()`  


```{r}
x <- 10
y <- 10
x+y
```


```{r}
add <- function(x){
  y <- 10
  x+y
}
```

Can I just use my new function?

```{r}
add(1)
```

Let's make it a bit more flexible 

```{r}
add <- function(x, y=1){
  x+y
}

add(10,10)
```

```{r}
add(10)
```

```{r}
add(10, 100)
```


## 2nd example grade() function

Write a function to grade student work.

We will start wiht a simple version of the problem and the following example studnet vectors: 


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```


Start with student 1 

```{r}
mean(student1)
```

```{r}
mean(student2, na.rm = TRUE)
```

```{r}
mean(student3, na.rm=TRUE)
```


Lets try to work with student1 and find (and drop) the lowest score
```{r}
student1
```

Google told me about min() and max()

```{r}
min(student1)
```

```{r}
which.min(student1)
```
```{r}
student1[1:4]
```
```{r}
student1[which.min(student1)]
```

```{r}
student1[-8]
```

Our first working snippet that drops the lowest score andc calculates the mean 

```{r}
mean(student1[-which.min(student1)])
```

```{r}
x <- student1 
mean(x[-which.min(x)])
```

Our approach to the NA problem (missing homeworks): We can replace all NA values with zero 

1st task is find the NA values (ie. where are they in the vector)

```{r}
x <- student2
x
```

```{r}
x == 90
```
```{r}
x
is.na(x)
```

I have found the NA (TRUE) values from `is.na()` now I want to make them 0


```{r}
x[is.na(x)] <- 0
x
```

I want to combine the `is.na()` with making these elements equal 0. And then take this "masked" (vector of student scores with NA values as zero) and drop the lowest and get he mean.

```{r}
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```

```{r}
x = student3

x[is.na(x)] <- 0
mean(x[-which.min(x)])
```
Now I can turn my snipet into my first function

```{r}
grade <- function(x){
  # Set NA (missing work) to 0
  x[is.na(x)] <- 0
  # Drop lowest score and get mean 
  mean(x[-which.min(x)])
}
```

```{r}
grade(student2)
```

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names=1)
head(gradebook)
```


The `apply()` function in R is useful but can be a little confusing to begin with. Lets have a look at how it works.

```{r}
ans <- apply(gradebook, 1, grade)
ans
```

> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

student 18


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
which.min(apply(gradebook, 2, mean, na.rm=TRUE))
```



```{r}
cor(gradebook$hw1, ans)
```

```{r}
cor(gradebook$hw5, ans)
gradebook$hw5
```

Make all NA values into zero. 
```{r}
mask <- gradebook
mask[is.na(mask)] <-  0
mask
```

```{r}
cor(mask$hw5, ans)
```
Now we can use `apply()` to examine the correlation of every assignment in the masked gradebook to the overall score for each student in the class. 

```{r}
apply(mask, 2, cor, y=ans)
```

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

HW5 







