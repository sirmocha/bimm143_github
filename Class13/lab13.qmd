---
title: "Class 13: RNASeq Analysis"
author: "Kevin Tan (PID: A16774162)"
format: pdf
---

The data for today's lab comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects

## Import Data 

We need tow things for this analysis: counts and metadata. These are called "counutdata" and "colData" in the DESeq2 world. 

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

The counts are organized with a gene per row and experiment per column

```{r}
head(metadata)
```

## Examine the Data

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

>Q2. How many ‘control’ cell lines do we have? 

```{r}
sum(metadata$dex == 'control')
```
```{r}
table(metadata$dex)
```

### Check on match of metadata and coldata
```{r}
colnames(counts)
```

```{r}
metadata$id
```


```{r}
colnames(counts) == metadata$id
```

If you want to know that all the elements of a vector are TRUE, we can use the `all()` function 

```{r}
all(c(T,T,T,F))
```
```{r}
all(colnames(counts) == metadata$id)
```

## Analysis

I want to start by comparing "control" and "treated" columns. To do this, I will find the average for each gene (row) in all "control" columns. Then I will find the average in the "treated" columns. Then I will compare them.


```{r}
control.inds <- metadata$dex == "control"
```

```{r}
control_counts <- counts[,control.inds]
```

Now find the mean count value per gene using the `apply()` function. 

```{r}
control_mean <- apply(control_counts,1,mean)
head(control_mean)
```

Now do the same for the "treated" columns. 

```{r}
treated.inds <- metadata$dex == "treated"
treated_counts <- counts[,treated.inds]
treated_mean <- apply(treated_counts,1,mean)
head(treated_mean)
```

Put these two mean vectors together for ease of book-keeping

```{r}
meancount <- data.frame(control_mean, treated_mean)
head(meancount)
```

Lets have a look with a plot 

```{r}
plot(meancount)
```

```{r}
plot(meancount, log="xy")
```

```{r}
log2(20/10)
```

```{r}
log2(5/10)
```

Log2 is a useful scale to use allowing us to better determine the magnitude of change.

We most often work in log2 units because they have a more intuitive interpretation. 

Here we calculate the log2 Fold-change of treated/control values and add it to our dataframe of results.

```{r}
meancount$log2fc <- log2(meancount$treated_mean / meancount$control_mean)
head(meancount)
```

There are some funky answers in here like NaN and -inf that are a result of zero count genes in the dataset 

It is common practice to filter these zero count out. 

```{r}
to.keep.inds <- (rowSums(meancount[,1:2] == 0) == 0)

mycounts <- meancount[to.keep.inds,]
head(mycounts)
```

>Q. How many genes do we have left after zero-count filtering 

```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or down" is a log2 fold change of +2 or -2. 

>Q. how many "up" regulated genes do we have? 

```{r}
sum(mycounts$log2fc >= 2)
```

## DESeq Analysis 

We need to do this analysis properly through testing for significance 

```{r}
#| message: FALSE
library("DESeq2")
```

To use DESeq we need to get our input data in a very particular format 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

Run DEseq Analysis 
```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res
```
we get an padj because regular p-value is susceptible to giving a false positive if too many groups are being compared. 

I want to make a figure showing an overiew of all my results to date. A plot of **log2 fold change** vs the **p-value** (adjusted p-value)

```{r}
# Color Vector
mycols <- rep("gray", nrow(res))
mycols[abs(res$log2FoldChange) >2 ] <- "red"

inds <- (res$padj <0.01) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "blue"

#Plot
plot(res$log2FoldChange, -log(res$padj), col=mycols, ylab = "-Log(p-Value)", xlab="Log2(FoldChange)")
abline(v=-2, col="gray", lty=2)
abline(v=2, col="gray", lty=2)
abline(h=-log(0.05), col="gray", lty=2)

```

## Annotation Data

We want to add gene symbols as well as other common identifiers from major databases for our genes of interest 

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

IDs are in the `rownames(res)` and they are in ENSEMBL

```{r}
#rownames(res)
```

We also want "GENENAME" and "ENTREZID" 

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

Save results to a CSV file 

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway Analysis 

Use the "gage" package to do some pathway analysis (aka geneset) 

```{r}
library(pathview)
library(gage)
library(gageData)
```

Peak at KEG data 

```{r}
data(kegg.sets.hs)
data(kegg.sets.hs, 2)
```

To run gage, we need to provide it with a vector of fold-change values (not big full results table)

```{r}
foldchanges <- res$log2FoldChange
```

Add ENTREZ IDs as names to this vector 


```{r}
names(foldchanges) <- res$entrezid
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets = kegg.sets.hs)
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

Let's have a look at the hsa05310 Asthma pathway with our gene highlighted using the pathview() function: 

```{r}
pathview(gene.data=foldchanges, pathway.id = "hsa04110")
```















